connect mongo

0> getURL and username password
1. npm install mongoose
2. if you created a password with special characters, then you'll need to URL encode that password (optional in certain condition [: / ? # [ ] @ ! $ & ' ( ) * , ; = % ]) {https://www.mongodb.com/docs/atlas/troubleshoot-connection/#special-characters-in-connection-string-password}
e.g. >> p@ssw0rd'9'!
is >> p%40ssw0rd%279%27%21


3. run your app like >> node mongo.js yourPassword
and when running app in dev >> npm run dev yourPassword [backend]


#Schema

the object will save like this 
{
  _id: new ObjectId('661f5e344acb41c60cc8a085'),
  content: 'HTML is easy',
  important: true,
  __v: 0
}

4. We also don't want to return the mongo versioning field __v to the frontend and also  _id property of Mongoose objects looks like a string, it is in fact an object.
One way to format the objects returned by Mongoose is to modify {https://stackoverflow.com/questions/7034848/mongodb-output-id-instead-of-id} the toJSON method of the schema, which is used on all instances of the models produced with that schema.

The toJSON method we defined transforms it into a string

noteSchema.set('toJSON', {
  transform: (document, returnedObject) => {
    returnedObject.id = returnedObject._id.toString()
    delete returnedObject._id
    delete returnedObject.__v
  }
})


5. Moving db configuration to its own module e.g. models/note.js

const url = process.env.MONGODB_URI
// not hardcoded ==instead the address of the database is passed to the application via the MONGODB_URI environment variable.

many way to use MONGODB_URI
a. MONGODB_URI=address_here npm run dev
b. dotenv library {recommended} >> npm install dotenv

... To use the library, we create a .env file at the root of the project.
... .env file should be gitignored right away
..inside paste 
MONGODB_URI=mongodb+srv://fullstack:thepasswordishere@cluster0.o1opl.mongodb.net/noteApp?retryWrites=true&w=majority
PORT=3001

...reference them in your code just like you would reference normal environment variables, with the process.env.MONGODB_URI syntax.






6. Using database in route handlers
 a)
  // all collection get with mongoose
  app.get('/api/notes', (request, response) => {
    Note.find({}).then(notes => {
      response.json(notes)
    })
  })

b)
    // with mangoose indiviual id get=========================
    app.get('/api/notes/:id', (request, response) => {
      const id = request.params.id;
      Note.findById(id).then(note => {
        response.json(note)
      })
    })

c)

//   post request
  app.post('/api/notes', (request, response) => {
      
    const body = request.body

    if (!body.content) {
        return response.status(400).json({ 
        error: 'content missing' 
        })
    }

    //with mongoose post request=========================

    const note = new Note({
      content: body.content,
      important: body.important || false,
    })
  
    note.save().then(savedNote => {
      response.json(savedNote)
    })

  })

d)
  // with Mongoose update note by ID=========================

  app.put('/api/notes/:id', (request, response, next) => {
    const body = request.body
  
    const note = {
      content: body.content,
      important: body.important,
    }
  
  // added the optional { new: true } parameter, which will cause our event handler to be called with the new modified document instead of the original.

    Note.findByIdAndUpdate(request.params.id, note, { new: true })
      .then(updatedNote => {
        response.json(updatedNote)
      })
      .catch(error => next(error))
  })

  e) 

  // with mangoose for delete=========================
  app.delete('/api/notes/:id', (request, response, next) => {
    Note.findByIdAndDelete(request.params.id)
      .then(result => {
        response.status(204).end()
      })
      .catch(error => next(error))
  })



  7. error handling
  >> Moving error handling into middleware


  8.order of middleware loading
  //====================================

    app.use(express.static('dist'))
    app.use(express.json())
    app.use(requestLogger)

    app.post('/api/notes', (request, response) => {
      const body = request.body
      // ...
    })

    const unknownEndpoint = (request, response) => {
      response.status(404).send({ error: 'unknown endpoint' })
    }

    // handler of requests with unknown endpoint
    app.use(unknownEndpoint)

    const errorHandler = (error, request, response, next) => {
      // ...
    }

    // handler of requests with result to errors
    app.use(errorHandler)

  //====================================






8. validation functionality available in Mongoose













